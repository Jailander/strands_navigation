<launch>
  <!-- <arg name="env" default="uol_ww"/> -->
    <arg name="with_chest_xtion" default="false"/>
    <arg name="chest_xtion_machine" default="localhost"/>
    <arg name="chest_xtion_user" default=""/>
    
    <arg name="global_frame_id" default="slam" />
    <arg name="map" default="$(find strands_morse)/uol/maps/uol_ww.yaml"/> 
    
    
    <arg name="topo_nav_machine" default="right-cortex"/>
    <arg name="topo_nav_user" default="strands"/>
    <arg name="mon_nav_config_file" default="$(find strands_recovery_behaviours)/config/monitored_nav_config.yaml"/>
    <arg name="wait_reset_bumper_duration" default="10.0"/>

    <arg name="with_mux" default="false" />
    

    <!-- WARNING: This EBC will be powerded on and off during docking! -->
    <arg name="lightEBC" default=""/>
    <arg name="positionUpdate" default="true"/>    

   
    <arg name="with_human_aware" default="true"/>
    <arg name="timeout" default="0.0" />
    <arg name="max_dist" default="4.0" />
    <arg name="min_dist" default="1.0" />
    <arg name="detection_angle" default="45.0" />
    <arg name="gaze_type" default="1" />
    
        <!-- gmapping parameters -->
<!--    <arg name="delta" default="0.05"/>
    <arg name="minimumScore" default="550.0"/>
    <arg name="maxUrange" default="20.0"/>
    <arg name="srr" default="0.05"/>
    <arg name="srt" default="0.05"/>
    <arg name="str" default="0.05"/>
    <arg name="stt" default="0.05"/>
    
    <arg name="odom_frame" default="$(arg global_frame_id)"/>
    <arg name="map_frame" default="map" />

    <arg name="xmin" default="-100"/>
    <arg name="ymin" default="-100"/>
    <arg name="xmax" default="100"/>
    <arg name="ymax" default="100"/> -->
    
    <!--<arg name="map_folder" default="/storage/predicted_maps/" />-->
    
    
    <!-- amcl parameters -->
    <arg name="amcl_frame_id" default="amcl"/>
    
    <arg name="machine" default="localhost" />
    <arg name="user" default="" />

    <!-- NOW when launching in a remote mode it will need the ROS_ENV_LOADER set if not it will leave it empty -->
    <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true" />

    

    <!-- 2D Navigation -->
    <include file="$(find predictive_maps)/launch/remap_movebase.launch">
	<arg name="map" value="$(arg map)"/>
	<arg name="with_chest_xtion" value="$(arg with_chest_xtion)"/>
	<arg name="chest_xtion_machine" value="$(arg chest_xtion_machine)"/>
	<arg name="chest_xtion_user" value="$(arg chest_xtion_user)"/>
	<!--<arg name="amcl_frame_id" value="$(arg amcl_frame_id)"/>-->
    </include>
    
    <include file="$(find predictive_maps)/launch/remapping.launch"/>
<!--      <arg name="global_frame_id" value="$(arg global_frame_id)" />  -->

      <!-- gmapping parameters -->
<!--      <arg name="delta"	value="$(arg delta)"/>
      <arg name="minimumScore"	value="$(arg minimumScore)"/>
      <arg name="maxUrange"	value="$(arg maxUrange)"/>
      <arg name="srr"	value="$(arg srr)"/>
      <arg name="srt"	value="$(arg srt)"/>
      <arg name="str"	value="$(arg str)"/>
      <arg name="stt"	value="$(arg stt)"/>
    
      <arg name="odom_frame" value="$(arg odom_frame)"/>
      <arg name="map_frame" value="$(arg map_frame)" />

      <arg name="xmin" value="$(arg xmin)"/>
      <arg name="ymin" value="$(arg ymin)"/>
      <arg name="xmax" value="$(arg xmax)"/>
      <arg name="ymax" value="$(arg ymax)"/>     
    </include> -->

    <!--- Docking -->
    <include unless="$(arg with_mux)" file="$(find scitos_docking)/launch/charging.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
      <arg name="lightEBC"  value="$(arg lightEBC)"/>
      <arg name="positionUpdate"  value="$(arg positionUpdate)"/>
    </include>
    <include if="$(arg with_mux)" file="$(find scitos_docking)/launch/charging_mux.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
      <arg name="lightEBC"  value="$(arg lightEBC)"/>
      <arg name="positionUpdate"  value="$(arg positionUpdate)"/>
    </include>

    <!-- Backtrack server -->
    <include file="$(find backtrack_behaviour)/launch/backtrack.launch"/>
    
      <!--- Topological Navigation (includes monitored_navigation) -->
    <include file="$(find topological_navigation)/launch/topological_navigation.launch">
      <arg name="machine"  value="$(arg topo_nav_machine)"/>
      <arg name="user"  value="$(arg topo_nav_user)"/>
      <arg name="map" value="$(arg topological_map)"/>
      <arg name="mon_nav_config_file" value="$(arg mon_nav_config_file)"/>
      <arg name="wait_reset_bumper_duration" value="$(arg wait_reset_bumper_duration)"/>
    </include>
    
    <group if="$(arg with_human_aware)">
    <node name="gaze_at_pose" pkg="strands_gazing" type="gaze_at_pose" respawn="true"/>
    <node name="pose_extractor" pkg="pose_extractor" type="extract_last_pose_from_path.py" respawn="true"/>
    <include file="$(find strands_human_aware_navigation)/launch/human_aware_navigation.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
      <arg name="timeout"  value="$(arg timeout)"/>
      <arg name="max_dist"  value="$(arg max_dist)"/>
      <arg name="min_dist"  value="$(arg min_dist)"/>
      <arg name="detection_angle"  value="$(arg detection_angle)"/>
      <arg name="gaze_type"  value="$(arg gaze_type)"/>
    </include>
  </group>
    
    <node pkg="predictive_maps" type="fake_frames_publisher.py" name="fake_frames_publisher" respawn="true"/>
    
    <node pkg="predictive_maps" type="map_mux.py" name="map_mux" respawn="true"/>
      
</launch>